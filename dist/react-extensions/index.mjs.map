{"version":3,"sources":["../../src/react-extensions/useForm.tsx"],"sourcesContent":["import { useState, useCallback, useMemo } from \"react\";\r\nimport axios, { AxiosRequestConfig } from \"axios\";\r\nimport { validateAll, validateField as coreValidateField } from \"../validator\";\r\nimport { parseRuleString } from \"../rules\";\r\n\r\nexport type SubmitOptions = AxiosRequestConfig & {\r\n  validateBeforeSubmit?: boolean;\r\n  onSuccess?: (resp: any) => void;\r\n  onError?: (err: any) => void;\r\n};\r\n\r\nexport function useForm<T extends Record<string, any>>(\r\n  initialValues: T,\r\n  rules?: Partial<Record<keyof T, string | string[] | ((v:any,d?:any)=>string|null)[]>>\r\n) {\r\n  const [data, setData] = useState<T>(initialValues);\r\n  const [errors, setErrors] = useState<Partial<Record<keyof T, string | null>>>({});\r\n  const [processing, setProcessing] = useState(false);\r\n\r\n  // --- Build reverse dependency map: if fieldB has \"same:fieldA\" etc.,\r\n  // then fieldA change -> revalidate fieldB automatically.\r\n  const dependentsMap = useMemo(() => {\r\n    const map = new Map<keyof T, Set<keyof T>>();\r\n    if (!rules) return map;\r\n\r\n    const add = (base: keyof T, dep: keyof T) => {\r\n      if (!map.has(base)) map.set(base, new Set());\r\n      map.get(base)!.add(dep);\r\n    };\r\n\r\n    for (const key in rules) {\r\n      const field = key as keyof T;\r\n      const def = rules[field];\r\n      const list = Array.isArray(def) ? def : [def];\r\n\r\n      for (const item of list) {\r\n        if (typeof item === \"string\") {\r\n          const tokens = parseRuleString(item);\r\n          for (const t of tokens) {\r\n            // Roman Urdu: \"same:password\" ka matlab yeh field (confirmation) depends on password.\r\n            if (t.name === \"same\" && t.args?.[0]) {\r\n              add(t.args[0] as keyof T, field);\r\n            }\r\n            // Optional: date dependencies\r\n            if ((t.name === \"after\" || t.name === \"before\") && t.args?.[0]) {\r\n              add(t.args[0] as keyof T, field);\r\n            }\r\n            // Note: Laravel \"confirmed\" UI-wise hum error confirmation field par dikhana chahtay hain,\r\n            // isliye recommend \"same:password\" ko confirmation field par lagana (neeche usage).\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return map;\r\n  }, [rules]);\r\n\r\n  const setField = useCallback((key: keyof T, value: any) => {\r\n    setData((prev) => ({ ...prev, [key]: value }));\r\n  }, []);\r\n\r\n  const setMultiple = useCallback((obj: Partial<T>) => {\r\n    setData((prev) => ({ ...prev, ...obj }));\r\n  }, []);\r\n\r\n  // âœ… New: validateField that accepts an optional value override to avoid stale state.\r\n  const validateField = useCallback(\r\n    (field: keyof T, valueOverride?: any) => {\r\n      if (!rules) return null;\r\n      const ruleDef = rules[field];\r\n\r\n      // nextData banayein taa ke latest ke sath validate ho\r\n      const nextData = (valueOverride !== undefined)\r\n        ? ({ ...data, [field]: valueOverride } as T)\r\n        : data;\r\n\r\n      const valueToUse = (valueOverride !== undefined) ? valueOverride : (data as any)[field];\r\n\r\n      const err = coreValidateField(field, valueToUse, nextData, ruleDef as any);\r\n\r\n      setErrors((prev) => ({ ...(prev as any), [field]: err }));\r\n\r\n      // ðŸ”„ Auto-revalidate dependents (e.g., password change -> recheck password_confirmation)\r\n      const deps = dependentsMap.get(field);\r\n      if (deps && deps.size > 0) {\r\n        const updated: Partial<Record<keyof T, string | null>> = {};\r\n        deps.forEach((depField) => {\r\n          const depDef = rules[depField];\r\n          const depErr = coreValidateField(depField, (nextData as any)[depField], nextData, depDef as any);\r\n          updated[depField] = depErr;\r\n        });\r\n        setErrors((prev) => ({ ...(prev as any), ...updated }));\r\n      }\r\n\r\n      return err;\r\n    },\r\n    [data, rules, dependentsMap]\r\n  );\r\n\r\n  const validate = useCallback(() => {\r\n    if (!rules) return { valid: true, errors: {} as any };\r\n    const { valid, errors: v } = validateAll(data, rules as any);\r\n    setErrors(v as any);\r\n    return { valid, errors: v };\r\n  }, [data, rules]);\r\n\r\n  async function submit(method: AxiosRequestConfig[\"method\"], url: string, config?: SubmitOptions) {\r\n    if (processing) return Promise.reject(new Error(\"Already processing\"));\r\n\r\n    const validateBefore = config?.validateBeforeSubmit ?? true;\r\n    if (validateBefore && rules) {\r\n      const { valid, errors: validationErrors } = validate();\r\n      if (!valid) {\r\n        setErrors(validationErrors as any);\r\n        return Promise.reject({ validation: true, errors: validationErrors });\r\n      }\r\n    }\r\n\r\n    setProcessing(true);\r\n    try {\r\n      const axiosConfig: AxiosRequestConfig = { method, url, ...config };\r\n      if (method && [\"get\", \"delete\"].includes((method as string).toLowerCase())) {\r\n        axiosConfig.params = data;\r\n      } else {\r\n        axiosConfig.data = data;\r\n      }\r\n      const response = await axios(axiosConfig);\r\n      setProcessing(false);\r\n      setErrors({} as any);\r\n      if (config?.onSuccess) config.onSuccess(response);\r\n      return response;\r\n    } catch (err: any) {\r\n      setProcessing(false);\r\n      if (err?.response?.data?.errors) {\r\n        const serverErrors = err.response.data.errors;\r\n        const normalized: Partial<Record<keyof T, string | null>> = {};\r\n        for (const k in serverErrors) {\r\n          normalized[k as keyof T] = Array.isArray(serverErrors[k]) ? serverErrors[k][0] : serverErrors[k];\r\n        }\r\n        setErrors(normalized as any);\r\n      }\r\n      if (config?.onError) config.onError(err);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  const get = (url: string, config?: SubmitOptions) => submit(\"get\", url, config);\r\n  const post = (url: string, config?: SubmitOptions) => submit(\"post\", url, config);\r\n  const put = (url: string, config?: SubmitOptions) => submit(\"put\", url, config);\r\n  const patch = (url: string, config?: SubmitOptions) => submit(\"patch\", url, config);\r\n  const del = (url: string, config?: SubmitOptions) => submit(\"delete\", url, config);\r\n\r\n  const reset = (keys?: (keyof T)[]) => {\r\n    if (!keys) {\r\n      setData(initialValues);\r\n      setErrors({} as any);\r\n      return;\r\n    }\r\n    setData((prev) => {\r\n      const copy = { ...prev };\r\n      for (const k of keys) copy[k as keyof T] = (initialValues as any)[k];\r\n      return copy;\r\n    });\r\n    setErrors((prev) => {\r\n      const copy = { ...(prev as any) };\r\n      for (const k of keys) (copy as any)[k] = null;\r\n      return copy;\r\n    });\r\n  };\r\n\r\n  return {\r\n    data,\r\n    setData: setMultiple,\r\n    setField,\r\n    errors,\r\n    setErrors,\r\n    processing,\r\n    validateField,     // <-- updated signature (valueOverride?)\r\n    validate,\r\n    get,\r\n    post,\r\n    put,\r\n    patch,\r\n    delete: del,\r\n    reset,\r\n  };\r\n}\r\n"],"mappings":";;;;;;;AAAA,SAAS,UAAU,aAAa,eAAe;AAC/C,OAAO,WAAmC;AAUnC,SAAS,QACd,eACA,OACA;AACA,QAAM,CAAC,MAAM,OAAO,IAAI,SAAY,aAAa;AACjD,QAAM,CAAC,QAAQ,SAAS,IAAI,SAAkD,CAAC,CAAC;AAChF,QAAM,CAAC,YAAY,aAAa,IAAI,SAAS,KAAK;AAIlD,QAAM,gBAAgB,QAAQ,MAAM;AAClC,UAAM,MAAM,oBAAI,IAA2B;AAC3C,QAAI,CAAC;AAAO,aAAO;AAEnB,UAAM,MAAM,CAAC,MAAe,QAAiB;AAC3C,UAAI,CAAC,IAAI,IAAI,IAAI;AAAG,YAAI,IAAI,MAAM,oBAAI,IAAI,CAAC;AAC3C,UAAI,IAAI,IAAI,EAAG,IAAI,GAAG;AAAA,IACxB;AAEA,eAAW,OAAO,OAAO;AACvB,YAAM,QAAQ;AACd,YAAM,MAAM,MAAM,KAAK;AACvB,YAAM,OAAO,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,GAAG;AAE5C,iBAAW,QAAQ,MAAM;AACvB,YAAI,OAAO,SAAS,UAAU;AAC5B,gBAAM,SAAS,gBAAgB,IAAI;AACnC,qBAAW,KAAK,QAAQ;AAEtB,gBAAI,EAAE,SAAS,UAAU,EAAE,OAAO,CAAC,GAAG;AACpC,kBAAI,EAAE,KAAK,CAAC,GAAc,KAAK;AAAA,YACjC;AAEA,iBAAK,EAAE,SAAS,WAAW,EAAE,SAAS,aAAa,EAAE,OAAO,CAAC,GAAG;AAC9D,kBAAI,EAAE,KAAK,CAAC,GAAc,KAAK;AAAA,YACjC;AAAA,UAGF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,EACT,GAAG,CAAC,KAAK,CAAC;AAEV,QAAM,WAAW,YAAY,CAAC,KAAc,UAAe;AACzD,YAAQ,CAAC,UAAU,EAAE,GAAG,MAAM,CAAC,GAAG,GAAG,MAAM,EAAE;AAAA,EAC/C,GAAG,CAAC,CAAC;AAEL,QAAM,cAAc,YAAY,CAAC,QAAoB;AACnD,YAAQ,CAAC,UAAU,EAAE,GAAG,MAAM,GAAG,IAAI,EAAE;AAAA,EACzC,GAAG,CAAC,CAAC;AAGL,QAAMA,iBAAgB;AAAA,IACpB,CAAC,OAAgB,kBAAwB;AACvC,UAAI,CAAC;AAAO,eAAO;AACnB,YAAM,UAAU,MAAM,KAAK;AAG3B,YAAM,WAAY,kBAAkB,SAC/B,EAAE,GAAG,MAAM,CAAC,KAAK,GAAG,cAAc,IACnC;AAEJ,YAAM,aAAc,kBAAkB,SAAa,gBAAiB,KAAa,KAAK;AAEtF,YAAM,MAAM,cAAkB,OAAO,YAAY,UAAU,OAAc;AAEzE,gBAAU,CAAC,UAAU,EAAE,GAAI,MAAc,CAAC,KAAK,GAAG,IAAI,EAAE;AAGxD,YAAM,OAAO,cAAc,IAAI,KAAK;AACpC,UAAI,QAAQ,KAAK,OAAO,GAAG;AACzB,cAAM,UAAmD,CAAC;AAC1D,aAAK,QAAQ,CAAC,aAAa;AACzB,gBAAM,SAAS,MAAM,QAAQ;AAC7B,gBAAM,SAAS,cAAkB,UAAW,SAAiB,QAAQ,GAAG,UAAU,MAAa;AAC/F,kBAAQ,QAAQ,IAAI;AAAA,QACtB,CAAC;AACD,kBAAU,CAAC,UAAU,EAAE,GAAI,MAAc,GAAG,QAAQ,EAAE;AAAA,MACxD;AAEA,aAAO;AAAA,IACT;AAAA,IACA,CAAC,MAAM,OAAO,aAAa;AAAA,EAC7B;AAEA,QAAM,WAAW,YAAY,MAAM;AACjC,QAAI,CAAC;AAAO,aAAO,EAAE,OAAO,MAAM,QAAQ,CAAC,EAAS;AACpD,UAAM,EAAE,OAAO,QAAQ,EAAE,IAAI,YAAY,MAAM,KAAY;AAC3D,cAAU,CAAQ;AAClB,WAAO,EAAE,OAAO,QAAQ,EAAE;AAAA,EAC5B,GAAG,CAAC,MAAM,KAAK,CAAC;AAEhB,iBAAe,OAAO,QAAsC,KAAa,QAAwB;AAC/F,QAAI;AAAY,aAAO,QAAQ,OAAO,IAAI,MAAM,oBAAoB,CAAC;AAErE,UAAM,iBAAiB,QAAQ,wBAAwB;AACvD,QAAI,kBAAkB,OAAO;AAC3B,YAAM,EAAE,OAAO,QAAQ,iBAAiB,IAAI,SAAS;AACrD,UAAI,CAAC,OAAO;AACV,kBAAU,gBAAuB;AACjC,eAAO,QAAQ,OAAO,EAAE,YAAY,MAAM,QAAQ,iBAAiB,CAAC;AAAA,MACtE;AAAA,IACF;AAEA,kBAAc,IAAI;AAClB,QAAI;AACF,YAAM,cAAkC,EAAE,QAAQ,KAAK,GAAG,OAAO;AACjE,UAAI,UAAU,CAAC,OAAO,QAAQ,EAAE,SAAU,OAAkB,YAAY,CAAC,GAAG;AAC1E,oBAAY,SAAS;AAAA,MACvB,OAAO;AACL,oBAAY,OAAO;AAAA,MACrB;AACA,YAAM,WAAW,MAAM,MAAM,WAAW;AACxC,oBAAc,KAAK;AACnB,gBAAU,CAAC,CAAQ;AACnB,UAAI,QAAQ;AAAW,eAAO,UAAU,QAAQ;AAChD,aAAO;AAAA,IACT,SAAS,KAAP;AACA,oBAAc,KAAK;AACnB,UAAI,KAAK,UAAU,MAAM,QAAQ;AAC/B,cAAM,eAAe,IAAI,SAAS,KAAK;AACvC,cAAM,aAAsD,CAAC;AAC7D,mBAAW,KAAK,cAAc;AAC5B,qBAAW,CAAY,IAAI,MAAM,QAAQ,aAAa,CAAC,CAAC,IAAI,aAAa,CAAC,EAAE,CAAC,IAAI,aAAa,CAAC;AAAA,QACjG;AACA,kBAAU,UAAiB;AAAA,MAC7B;AACA,UAAI,QAAQ;AAAS,eAAO,QAAQ,GAAG;AACvC,YAAM;AAAA,IACR;AAAA,EACF;AAEA,QAAM,MAAM,CAAC,KAAa,WAA2B,OAAO,OAAO,KAAK,MAAM;AAC9E,QAAM,OAAO,CAAC,KAAa,WAA2B,OAAO,QAAQ,KAAK,MAAM;AAChF,QAAM,MAAM,CAAC,KAAa,WAA2B,OAAO,OAAO,KAAK,MAAM;AAC9E,QAAM,QAAQ,CAAC,KAAa,WAA2B,OAAO,SAAS,KAAK,MAAM;AAClF,QAAM,MAAM,CAAC,KAAa,WAA2B,OAAO,UAAU,KAAK,MAAM;AAEjF,QAAM,QAAQ,CAAC,SAAuB;AACpC,QAAI,CAAC,MAAM;AACT,cAAQ,aAAa;AACrB,gBAAU,CAAC,CAAQ;AACnB;AAAA,IACF;AACA,YAAQ,CAAC,SAAS;AAChB,YAAM,OAAO,EAAE,GAAG,KAAK;AACvB,iBAAW,KAAK;AAAM,aAAK,CAAY,IAAK,cAAsB,CAAC;AACnE,aAAO;AAAA,IACT,CAAC;AACD,cAAU,CAAC,SAAS;AAClB,YAAM,OAAO,EAAE,GAAI,KAAa;AAChC,iBAAW,KAAK;AAAM,QAAC,KAAa,CAAC,IAAI;AACzC,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAEA,SAAO;AAAA,IACL;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,eAAAA;AAAA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,QAAQ;AAAA,IACR;AAAA,EACF;AACF;","names":["validateField"]}